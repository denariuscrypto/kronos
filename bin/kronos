#!/usr/bin/env node

var app = require('../app').app;
//var debug = require('debug')('kronos:server');
var http = require('http');
var ip = require('ip');
// const electron = require('electron');
// const BrowserWindow = electron.BrowserWindow;

// var iot = require('socket.io');
// var gritty = require('gritty');


var lan = '0.0.0.0';
var port = normalizePort('3300'); //Port 3300 for Socket.io Server
app.set('port', port);
var ipaddy = ip.address();

var server = require('../app').server;
//var sockett = iot.listen(server);

// gritty.listen(iot.listen(server), {
//   prefix: '/gritty'
// });

server.listen(port, ipaddy);
server.on('error', onError);
server.on('listening', onListening);
console.log('âœ“ Socket.io Server Started on '+ipaddy+':'+port);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

//let mainWindow;

// let mainWindow;

// mainWindow = new BrowserWindow({
//   width: 1280,
//   height: 720,
//   autoHideMenuBar: true,
//   useContentSize: true,
//   resizable: false,
// });
// mainWindow.loadURL('http://localhost:3000/');
// mainWindow.focus();

// function createWindow() {
//   mainWindow = new BrowserWindow({
//        width: 1280,
//        height: 720,
//        autoHideMenuBar: true,
//        useContentSize: true,
//        resizable: false,
//        show: true,
//      });
//   mainWindow.loadURL(`http://192.168.1.158:3000/`);
//   mainWindow.on('close', event => {
//     mainWindow = null;
//   });
// }


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Socket.io Server Listening on ' + JSON.stringify(addr.address) + ' on ' + bind);
  //debug('Listening on ' + bind);
  //main();
}

// app.removeAllListeners('ready');

// app.on('ready', createWindow);

//Quit when all windows are closed
// app.on('window-all-closed', function(){

//   // On macOS specific close process
//   if(process.platform !== 'darwin'){
//       app.quit();
//   }
// });

// app.on('activate', function(){
//   //macOS specific close process
//   if(win === null){
//       createWindow();
//   }
// });
//server.on('ready', main);